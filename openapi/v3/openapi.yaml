openapi: 3.0.1
info:
  title: Fulfillment API
  contact:
    name: Innabox project
    url: https://github.com/innabox
  license:
    name: Apache-2.0
    url: https://github.com/innabox/fulfillment-api/blob/main/LICENSE
  version: 0.0.1
servers:
- url: /
tags:
- name: Events
- name: ClusterTemplates
- name: Clusters
- name: HostClasses
- name: VirtualMachineTemplates
- name: VirtualMachines
- name: Hubs
paths:
  /api/events/v1/events:
    get:
      tags:
      - Events
      summary: Start watching events.
      description: |-
        Note that the server doesn't make any guarantee about the delivery or order of these events. In particular events
        that happen while the client is disconnected will not be delivered. Clients should consider using other mechanisms
        to ensure that they process objects correctly. For example, they can combine this watch mechanism with periodic
        redconciliation of all the objects.
      operationId: Events_Watch
      parameters:
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The value of this parameter is a [CEL](https://cel.dev) boolean expression. The `event` variable will contain the
          fields of the event. If the result of the expression is `true` then the event will be sent by the server. For
          example, to receive only the events that indicate that a cluster order has been modified and is now in the
          fulfilled state:

          ```
          event.type == EVENT_TYPE_OBJECT_CREATED && event.cluster_order.status.state == CLUSTER_ORDER_STATE_FULFILLED
          ```

          If this isn't provided, or if the value is empty, then all the events that the user has permission to see will be
          sent by the server.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream result of eventsv1EventsWatchResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/cluster_templates:
    get:
      tags:
      - ClusterTemplates
      summary: Retrieves the list of cluster templates.
      operationId: ClusterTemplates_List
      parameters:
      - name: offset
        in: query
        description: Index of the first result. If not specified the default value
          will be zero.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: |-
          Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
          that there may not be enough results to return, and that the server may decide, for performance reasons, to return
          less results than requested.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
          of the attributes of the template instead of the names of the columns of a table. For example, in order to retrieve
          all the templates with a title starting with `large` the value should be:

              title like 'large%'

          If this isn't provided, or if the value is empty, then all the templates that the user has permission to see will
          be returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          Order criteria.

          The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
          names of the attributes of the templated instead of the names of the columns of a table. For example, in order to
          sort the templates descending by title the value should be:

              name desc

          If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClusterTemplatesListResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    post:
      tags:
      - ClusterTemplates
      summary: Creates a new cluster template.
      operationId: ClusterTemplates_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/cluster_templates/{id}:
    get:
      tags:
      - ClusterTemplates
      summary: Retrieves the details of one specific cluster template.
      operationId: ClusterTemplates_Get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    delete:
      tags:
      - ClusterTemplates
      summary: Delete a cluster template.
      operationId: ClusterTemplates_Delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClusterTemplatesDeleteResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/cluster_templates/{object.id}:
    patch:
      tags:
      - ClusterTemplates
      summary: Updates an existint cluster template.
      operationId: ClusterTemplates_Update
      parameters:
      - name: object.id
        in: path
        description: Unique identifier of the template.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cluster_templates_object_id_body"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/clusters:
    get:
      tags:
      - Clusters
      summary: Retrieves the list of clusters.
      operationId: Clusters_List
      parameters:
      - name: offset
        in: query
        description: Index of the first result. If not specified the default value
          will be zero.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: |-
          Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
          that there may not be enough results to return, and that the server may decide, for performance reasons, to return
          less results than requested.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
          of the attributes of the cluster instead of the names of the columns of a table. For example, in order to retrieve
          all the cluster with a API URL starting with `http:` the value should be:

              api_url like 'http:%'

          If this isn't provided, or if the value is empty, then all the clusters that the user has permission to see will be
          returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          Order criteria.

          The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
          names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to
          sort the clusters descending by API URL the value should be:

              api_url desc

          If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClustersListResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    post:
      tags:
      - Clusters
      summary: Creates a new cluster.
      description: |-
        Note that this operation is not allowed for regular users, only for the server. Regular users create clusters
        indirectly, creating a cluster order that will eventually result in the system creating a cluster.
      operationId: Clusters_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fulfillmentv1Cluster"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1Cluster"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/clusters/{id}:
    get:
      tags:
      - Clusters
      summary: Retrieves the details of one specific cluster.
      operationId: Clusters_Get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1Cluster"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    delete:
      tags:
      - Clusters
      summary: Delete a cluster.
      operationId: Clusters_Delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1ClustersDeleteResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/clusters/{id}/kubeconfig:
    get:
      tags:
      - Clusters
      summary: Returns the admin Kubeconfig of the cluster.
      description: |-
        This is intended for use with HTTP and returns the YAML text of the Kubeconfig directly using the content type
        `application/yaml`.

        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
      operationId: Clusters_GetKubeconfigViaHttp
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiHttpBody"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/clusters/{id}/password:
    get:
      tags:
      - Clusters
      summary: Returns the admin password of the cluster.
      description: |-
        This is intended for use with HTTP and returns the YAML text of the password directly using the content type
        `text/plain`.

        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
      operationId: Clusters_GetPasswordViaHttp
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiHttpBody"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/clusters/{object.id}:
    patch:
      tags:
      - Clusters
      summary: Updates an existing cluster.
      description: |-
        In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
        populated from the list of fields present in the request body. For example, to update the `state` of a cluster to
        `READY` the request line should be like this:

        ```http
        PATCH /api/fulfillment/v1/clusters/123
        ```

        And the request body should be like this:

        ```json
        {
          "status": {
            "state": "CLUSTER_STATE_READY"
          }
        }
        ```

        The response body will contain the modified object.
      operationId: Clusters_Update
      parameters:
      - name: object.id
        in: path
        description: Unique identifier of the cluster.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/clusters_object_id_body"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1Cluster"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/host_classes:
    get:
      tags:
      - HostClasses
      summary: Retrieves the list of host classes.
      operationId: HostClasses_List
      parameters:
      - name: offset
        in: query
        description: Index of the first result. If not specified the default value
          will be zero.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: |-
          Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
          that there may not be enough results to return, and that the server may decide, for performance reasons, to return
          less results than requested.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
          of the attributes of the host class instead of the names of the columns of a table. For example, in order to
          retrieve all the host classes with a title starting with `gpu` the value should be:

              title like 'gpu%'

          If this isn't provided, or if the value is empty, then all the host classes that the user has permission to see
          will be returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          Order criteria.

          The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
          names of the attributes of the host class instead of the names of the columns of a table. For example, in order to
          sort the templates descending by title the value should be:

              name desc

          If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1HostClassesListResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    post:
      tags:
      - HostClasses
      summary: Creates a new host class.
      description: "This method isn't allowed for regular users, only for the system\
        \ itself."
      operationId: HostClasses_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fulfillmentv1HostClass"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1HostClass"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/host_classes/{id}:
    get:
      tags:
      - HostClasses
      summary: Retrieves the details of one specific host classes.
      operationId: HostClasses_Get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1HostClass"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    delete:
      tags:
      - HostClasses
      summary: Delete a host class.
      description: "This method isn't allowed for regular users, only for the system\
        \ itself."
      operationId: HostClasses_Delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1HostClassesDeleteResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/host_classes/{object.id}:
    patch:
      tags:
      - HostClasses
      summary: Updates an existint host class.
      description: "This method isn't allowed for regular users, only for the system\
        \ itself."
      operationId: HostClasses_Update
      parameters:
      - name: object.id
        in: path
        description: Unique identifier of the class.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/host_classes_object_id_body"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1HostClass"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/virtual_machine_templates:
    get:
      tags:
      - VirtualMachineTemplates
      summary: Retrieves the list of virtual machine templates.
      operationId: VirtualMachineTemplates_List
      parameters:
      - name: offset
        in: query
        description: Index of the first result. If not specified the default value
          will be zero.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: |-
          Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
          that there may not be enough results to return, and that the server may decide, for performance reasons, to return
          less results than requested.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
          of the attributes of the template instead of the names of the columns of a table. For example, in order to retrieve
          all the templates with a title starting with `large` the value should be:

              title like 'large%'

          If this isn't provided, or if the value is empty, then all the templates that the user has permission to see will
          be returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          Order criteria.

          The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
          names of the attributes of the templated instead of the names of the columns of a table. For example, in order to
          sort the templates descending by title the value should be:

              name desc

          If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplatesListResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    post:
      tags:
      - VirtualMachineTemplates
      summary: Creates a new virtual machine template.
      operationId: VirtualMachineTemplates_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/virtual_machine_templates/{id}:
    get:
      tags:
      - VirtualMachineTemplates
      summary: Retrieves the details of one specific virtual machine template.
      operationId: VirtualMachineTemplates_Get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    delete:
      tags:
      - VirtualMachineTemplates
      summary: Delete a virtual machine template.
      operationId: VirtualMachineTemplates_Delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplatesDeleteResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/virtual_machine_templates/{object.id}:
    patch:
      tags:
      - VirtualMachineTemplates
      summary: Updates an existing virtual machine template.
      operationId: VirtualMachineTemplates_Update
      parameters:
      - name: object.id
        in: path
        description: Unique identifier of the template.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/virtual_machine_templates_object_id_body"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/virtual_machines:
    get:
      tags:
      - VirtualMachines
      summary: Retrieves the list of virtual machines.
      operationId: VirtualMachines_List
      parameters:
      - name: offset
        in: query
        description: Index of the first result. If not specified the default value
          will be zero.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: |-
          Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
          that there may not be enough results to return, and that the server may decide, for performance reasons, to return
          less results than requested.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: |-
          Filter criteria.

          The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
          of the attributes of the virtual machine instead of the names of the columns of a table. For example, in order to retrieve
          all the virtual machines with an IP address starting with `192.168` the value should be:

              ip_address like '192.168%'

          If this isn't provided, or if the value is empty, then all the virtual machines that the user has permission to see will be
          returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          Order criteria.

          The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
          names of the attributes of the virtual machine instead of the names of the columns of a table. For example, in order to
          sort the virtual machines descending by IP address the value should be:

              ip_address desc

          If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachinesListResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    post:
      tags:
      - VirtualMachines
      summary: Creates a new virtual machine.
      description: |-
        Note that this operation is not allowed for regular users, only for the server. Regular users create virtual machines
        indirectly, creating a virtual machine order that will eventually result in the system creating a virtual machine.
      operationId: VirtualMachines_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
  /api/fulfillment/v1/virtual_machines/{id}:
    get:
      tags:
      - VirtualMachines
      summary: Retrieves the details of one specific virtual machine.
      operationId: VirtualMachines_Get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
    delete:
      tags:
      - VirtualMachines
      summary: Delete a virtual machine.
      operationId: VirtualMachines_Delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachinesDeleteResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
  /api/fulfillment/v1/virtual_machines/{object.id}:
    patch:
      tags:
      - VirtualMachines
      summary: Updates an existing virtual machine.
      description: |-
        In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
        populated from the list of fields present in the request body. For example, to update the `state` of a virtual machine to
        `READY` the request line should be like this:

        ```http
        PATCH /api/fulfillment/v1/virtual_machines/123
        ```

        And the request body should be like this:

        ```json
        {
          "status": {
            "state": "VIRTUAL_MACHINE_STATE_READY"
          }
        }
        ```

        The response body will contain the modified object.
      operationId: VirtualMachines_Update
      parameters:
      - name: object.id
        in: path
        description: Unique identifier of the virtual machine.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/virtual_machines_object_id_body"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      x-codegen-request-body-name: object
components:
  schemas:
    apiHttpBody:
      type: object
      properties:
        content_type:
          type: string
          description: The HTTP Content-Type header value specifying the content type
            of the body.
        data:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: The HTTP request/response body as raw binary.
          format: byte
        extensions:
          type: array
          description: |-
            Application specific response metadata. Must be set in the first response
            for streaming APIs.
          items:
            $ref: "#/components/schemas/protobufAny"
      description: |-
        Message that represents an arbitrary HTTP body. It should only be used for
        payload formats that can't be represented as JSON, such as raw binary or
        an HTML page.


        This message can be used both in streaming and non-streaming API methods in
        the request as well as the response.

        It can be used as a top-level request field, which is convenient if one
        wants to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body.

        Example:

            message GetResourceRequest {
              // A unique request id.
              string request_id = 1;

              // The raw HTTP body is bound to this field.
              google.api.HttpBody http_body = 2;

            }

            service ResourceService {
              rpc GetResource(GetResourceRequest)
                returns (google.api.HttpBody);
              rpc UpdateResource(google.api.HttpBody)
                returns (google.protobuf.Empty);

            }

        Example with streaming methods:

            service CaldavService {
              rpc GetCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);
              rpc UpdateCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);

            }

        Use of this type only changes how the request and response bodies are
        handled, all other features will continue to work unchanged.
    eventsv1Event:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the event.
        type:
          $ref: "#/components/schemas/eventsv1EventType"
        cluster:
          $ref: "#/components/schemas/fulfillmentv1Cluster"
        cluster_template:
          $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
      description: Represents events delivered by the server.
    eventsv1EventType:
      type: string
      description: |2-
         - EVENT_TYPE_UNSPECIFIED: Unspecified means that the even type is unknown.
         - EVENT_TYPE_OBJECT_CREATED: Means that a new object has been created.

        The payload will contain the representation of the object.
         - EVENT_TYPE_OBJECT_UPDATED: Means that an existing object has been modified.

        The payload will contain the updated representation of the object.
         - EVENT_TYPE_OBJECT_DELETED: Means that an object has been deleted.

        The payload will contain the representation of the object right before it was deleted.
      default: EVENT_TYPE_UNSPECIFIED
      enum:
      - EVENT_TYPE_UNSPECIFIED
      - EVENT_TYPE_OBJECT_CREATED
      - EVENT_TYPE_OBJECT_UPDATED
      - EVENT_TYPE_OBJECT_DELETED
    eventsv1EventsWatchResponse:
      type: object
      properties:
        event:
          $ref: "#/components/schemas/eventsv1Event"
    fulfillmentv1Cluster:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the cluster.
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        spec:
          $ref: "#/components/schemas/fulfillmentv1ClusterSpec"
        status:
          $ref: "#/components/schemas/fulfillmentv1ClusterStatus"
      description: |-
        Contains the details of the cluster.

        The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
        the cluster, is provided by the system and can't be modified by the user.
    fulfillmentv1ClusterCondition:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/fulfillmentv1ClusterConditionType"
        status:
          $ref: "#/components/schemas/v1ConditionStatus"
        last_transition_time:
          type: string
          description: This time is the last time that the condition was updated.
          format: date-time
        reason:
          type: string
          description: |-
            Contains a the reason of the condition in a format suitable for use by programs.

            The possible values will be documented in the object that contains the condition.
        message:
          type: string
          description: |-
            Contains a text giving more details of the condition.

            This will usually be progress reports, or error messages, and are intended for use by humans, to debug problems.
      description: Contains the details of a condition that describes the status of
        a cluster.
    fulfillmentv1ClusterConditionType:
      type: string
      description: |-
        Types of conditions used to describe the status of cluster.

         - CLUSTER_CONDITION_TYPE_UNSPECIFIED: Unspecified indicates that the condition is unknown.

        This will never be appear in the `spec.conditions` field of a cluster.
         - CLUSTER_CONDITION_TYPE_PROGRESSING: Indicates that the cluster isn't completely ready yet.

        Currently there are no `reason` values defined.
         - CLUSTER_CONDITION_TYPE_READY: Indicates that the cluster is ready to use.

        Currently there are no `reason` values defined.
         - CLUSTER_CONDITION_TYPE_FAILED: Indicates that the cluster is unusable.

        Currently there are no `reason` values defined.
         - CLUSTER_CONDITION_TYPE_DEGRADED: Indicates that the cluster is degraded.
      default: CLUSTER_CONDITION_TYPE_UNSPECIFIED
      enum:
      - CLUSTER_CONDITION_TYPE_UNSPECIFIED
      - CLUSTER_CONDITION_TYPE_PROGRESSING
      - CLUSTER_CONDITION_TYPE_READY
      - CLUSTER_CONDITION_TYPE_FAILED
      - CLUSTER_CONDITION_TYPE_DEGRADED
    fulfillmentv1ClusterNodeSet:
      type: object
      properties:
        host_class:
          type: string
          description: |-
            Identifier of the class of hosts that are part of the set.

            The details of the host class can be obtained using the `List` and `Get` method of the `HostClasses` service. For
            example, to get the details of the `acme_1tb` host class using the HTTP+JSON version of the API:

            ```http
            GET /api/fulfillment/v1/host_classes/acme_1tb
            ```

            Which will return something like this:

            ```json
            {
              "id": "acme_1tb",
              "title": "ACME server with 1 TiB of RAM and no GPU",
              "description": "ACME server model XYZ with 1 TiB of RAM, 2 Xeon 6 CPUS and no GPU."
            }
            ```

            This will be set by the system when the cluster is initially created, according to the template selected by the
            user.

            The user will not have permission to change this field.
        size:
          type: integer
          description: Number of nodes of the set.
          format: int32
      description: "Defines a set of nodes that are part of the cluster, all of them\
        \ of the same class of host."
    fulfillmentv1ClusterSpec:
      type: object
      properties:
        template:
          type: string
          description: |-
            Reference to the cluster template.

            This is mandatory, and must be the value of the `id` field of one of the cluster templates.

            This can't be modified after the cluster is created.
        template_parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/protobufAny"
          description: |-
            Values of the template parameters.

            When using the HTTP+JSON version of the API the values must be represented as documented in the (ProtoJSON format
            document)[https://protobuf.dev/programming-guides/json]. For example, if the template has a `number_of_gpus`
            parameter of integer type, the complete cluster should be represented like this:

            ```json
            {
              "spec": {
                "template_id": "123",
                "template_parameters": {
                  "number_of_gpus": {
                    "@type": "type.googleapis.com/google.protobuf.Int32Value",
                    "value": 3
                  }
                }
              }
            }
            ```

            The possible values of the `@type` are the same as those used by the `type_url` field of the `Any` type:

            | Type                           | Value                                             |
            |--------------------------------|---------------------------------------------------|
            | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
            | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
            | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
            | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
            | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
            | String                         | `type.googleapis.com/google.protobuf.StringValue` |
            | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
            | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
            | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
            | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |

            These parameters can't be modified after the cluster is created.
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/fulfillmentv1ClusterNodeSet"
          description: |-
            Desired node sets of the cluster.

            This will be automatically set by the system when the cluster is initially created, according to the template
            selected by the user, and can be later modified to change the size.

            The key of the map is the unique identifier of the node set for this cluster.

            For example, a cluster created with two different node sets, one for nodes without GPUs and another for nodes with
            GPUs could be represented like this:

            ```json
            {
              "id": "123",
              "spec": {
                "node_sets": {
                  "compute": {
                    "host_class": "acme_1tb",
                    "size": 3
                  },
                  "gpu": {
                    "host_class": "acme_1tb_h100",
                    "size": 3
                  }
                }
              },
              "status": {
                "state": "CLUSTER_STATE_READY",
                "node_sets": {
                  "compute": {
                    "host_class": "acme_1tb",
                    "size": 3
                  },
                  "gpu": {
                    "host_class": "acme_1tb_h100",
                    "size": 3
                  }
                }
              }
            }
            ```

            The user will not be allowed to change the `host_class` field.

            The user will not be allowed to remove existing node sets, or add new node sets.

            The user will be allowed to update `size` field.

            If at any time the system can't allocate the number of nodes requested by the user, because of permissions, quota,
            availability of resources or system errors, the cluster will be marked as degraded, and the details will be in the
            `DEGRADED` condition.
      description: The spec contains the details of a cluster as desired by the user.
    fulfillmentv1ClusterState:
      type: string
      description: |-
        Represents the overall state of a cluster.

         - CLUSTER_STATE_UNSPECIFIED: Unspecified indicates that the state is unknown.
         - CLUSTER_STATE_PROGRESSING: Indicates that the cluster isn't ready yet.
         - CLUSTER_STATE_READY: Indicates indicates that the cluster is ready.
         - CLUSTER_STATE_FAILED: Indicates indicates that the cluster is unusable.
      default: CLUSTER_STATE_UNSPECIFIED
      enum:
      - CLUSTER_STATE_UNSPECIFIED
      - CLUSTER_STATE_PROGRESSING
      - CLUSTER_STATE_READY
      - CLUSTER_STATE_FAILED
    fulfillmentv1ClusterStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/fulfillmentv1ClusterState"
        conditions:
          type: array
          description: |-
            Contains a list of conditions that describe in detail the status of the cluster.

            For example, an cluster that is ready could be represented like this (when converted to JSON):

               {
                 "id": "123",
                 "spec": {
                 },
                 "status": {
                   "state": "CLUSTER_STATE_READY",
                   "conditions": [
                     {
                       "type": "CLUSTER_CONDITION_TYPE_READY",
                       "status": "CONDITION_STATUS_TRUE",
                       "last_transition_time": "2025-03-12 20:15:59+00:00",
                       "message": "The cluster is ready to use",
                     },
                     {
                       "type": "CLUSTER_CONDITION_TYPE_FAILED",
                       "status": "CONDITION_STATUS_FALSE",
                       "last_transition_time": "2025-03-12 20:10:59+00:00"
                     }
                   ]
                 }
               }

            In this example the `READY` condition is true. That tells us that the cluster is ready to use via the API URL
            provided in the `status.api_url` field.

            The `FAILED` condition is false. That tells us that the cluster is *not* failed.

            Note that in this example, to make it shorter, only one condition appears. In general all the conditions (except
            `UNSPECIFIED`) will appear exactly once.

            Check the documentation of the values of the `ClusterConditionType` enumerated type to see possible conditions and
            reasons.
          items:
            $ref: "#/components/schemas/fulfillmentv1ClusterCondition"
        api_url:
          type: string
          description: |-
            URL of te API server of the cluster.

            This will be empty if the cluster isn't ready.
        console_url:
          type: string
          description: |-
            URL of the console of the cluster.

            This will be empty if the cluster isn't ready or the console isn't enabled.
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/fulfillmentv1ClusterNodeSet"
          description: |-
            Current node sets of the cluster.

            This is the current status of the node sets. It will be different to `spec.node_sets` when there is a change that
            is in progress, or if the system can't apply the changes requested by the user.

            The key of the map is the unique identifier of the node set for this cluster.
      description: The status contains the details of the cluster provided by the
        system.
    fulfillmentv1ClusterTemplate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the template.
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
            UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the template, using Markdown\
            \ format."
        parameters:
          type: array
          description: |-
            Definitions of the parameters that can be used to customize the template.

            Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
            `spec.template_parameters` field of the cluster.
          items:
            $ref: "#/components/schemas/fulfillmentv1ClusterTemplateParameterDefinition"
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/fulfillmentv1ClusterTemplateNodeSet"
          description: Initial node sets of the cluster.
      description: |-
        A cluster template defines a type of cluster that can be created by the user. Note that the user doesn't create these
        templates: the system provides a collection of them, and the user chooses one.
    fulfillmentv1ClusterTemplateNodeSet:
      type: object
      properties:
        host_class:
          type: string
          description: Identifier of the class of hosts that are part of the set.
        size:
          type: integer
          description: Number of nodes of the set.
          format: int32
      description: "Defines a set of nodes that will be part of cluster, all of them\
        \ of the same class of host."
    fulfillmentv1ClusterTemplateParameterDefinition:
      type: object
      properties:
        name:
          type: string
          description: |-
            Name of the parameter.

            This is the name that should be used in the `template_parameters` field of the cluster to assign a value to the
            parameter.
        title:
          type: string
          description: |-
            Human friendly short description of the parameter, only a few words, suitable for displaying in one single line on
            a UI or CLI.
        description:
          type: string
          description: "Human friendly description of the parameter, using Markdown\
            \ format."
        required:
          type: boolean
          description: |-
            Indicates if this parameter is required or optional.

            Values for required parameters must be included when creating the cluster, otherwise it will be rejected.

            Note that there may be other dependencies between parameters which may cause a cluster to be rejected. For example,
            the allowed values of a parameter may depend on the value of another parameter. That kind of information will be in
            the `description` field.
        type:
          type: string
          description: |-
            Type of the parameter.

            The possible values are the same as those used by the `type_url` field of the `Any` type:

            | Type                           | Value                                             |
            |--------------------------------|---------------------------------------------------|
            | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
            | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
            | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
            | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
            | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
            | String                         | `type.googleapis.com/google.protobuf.StringValue` |
            | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
            | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
            | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
            | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |

            When using the HTTP+JSON version of the API the value provided in the `template_parameters` field of the cluster
            must be represented as documented in the (ProtoJSON format document)[https://protobuf.dev/programming-guides/json].
        default:
          $ref: "#/components/schemas/protobufAny"
      description: Contains type and documentation of a template parameter.
    fulfillmentv1ClusterTemplatesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
    fulfillmentv1ClusterTemplatesDeleteResponse:
      type: object
    fulfillmentv1ClusterTemplatesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
    fulfillmentv1ClusterTemplatesListResponse:
      type: object
      properties:
        size:
          type: integer
          description: |-
            Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
            of the request if there are not enough items, or of the system decides that returning that number of items isn't
            feasible or convenient for performance reasons.
          format: int32
        total:
          type: integer
          description: |-
            Total number of items of the collection that match the search criteria, regardless of the number of results
            requested with the `limit` parameter.
          format: int32
        items:
          type: array
          description: List of results.
          items:
            $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
    fulfillmentv1ClusterTemplatesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1ClusterTemplate"
    fulfillmentv1ClustersCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1Cluster"
    fulfillmentv1ClustersDeleteResponse:
      type: object
    fulfillmentv1ClustersGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1Cluster"
    fulfillmentv1ClustersListResponse:
      type: object
      properties:
        size:
          type: integer
          description: |-
            Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
            of the request if there are not enough items, or of the system decides that returning that number of items isn't
            feasible or convenient for performance reasons.
          format: int32
        total:
          type: integer
          description: |-
            Total number of items of the collection that match the search criteria, regardless of the number of results
            requested with the `limit` parameter.
          format: int32
        items:
          type: array
          description: List of results.
          items:
            $ref: "#/components/schemas/fulfillmentv1Cluster"
    fulfillmentv1ClustersUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1Cluster"
    fulfillmentv1HostClass:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the class.
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the host class, only a few words, suitable for displaying in one single
            line on a UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the host class, using Markdown\
            \ format."
      description: |-
        Describes a set of hosts that share characteristics.

        For example there could be a host class `acme_1tb` to describe the set of hosts manifactured by ACME and with 1 TiB
        of RAM, and another `ibm_mi300x` to describe the set of hosts manufactured IBM and with a MI300X GPU.

        This is similar to the _instance type_ concept used by many cloud providers.

        The detailed chracteristics of the host (CPU, memory, GPU, etc) will be in the `description` field.
    fulfillmentv1HostClassesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1HostClass"
    fulfillmentv1HostClassesDeleteResponse:
      type: object
    fulfillmentv1HostClassesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1HostClass"
    fulfillmentv1HostClassesListResponse:
      type: object
      properties:
        size:
          type: integer
          description: |-
            Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
            of the request if there are not enough items, or of the system decides that returning that number of items isn't
            feasible or convenient for performance reasons.
          format: int32
        total:
          type: integer
          description: |-
            Total number of items of the collection that match the search criteria, regardless of the number of results
            requested with the `limit` parameter.
          format: int32
        items:
          type: array
          description: List of results.
          items:
            $ref: "#/components/schemas/fulfillmentv1HostClass"
    fulfillmentv1HostClassesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1HostClass"
    fulfillmentv1VirtualMachine:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the virtual machine.
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        spec:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineSpec"
        status:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineStatus"
      description: |-
        Contains the details of the virtual machine.

        The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
        the virtual machine, is provided by the system and can't be modified by the user.
    fulfillmentv1VirtualMachineCondition:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineConditionType"
        status:
          $ref: "#/components/schemas/v1ConditionStatus"
        last_transition_time:
          type: string
          description: This time is the last time that the condition was updated.
          format: date-time
        reason:
          type: string
          description: |-
            Contains a the reason of the condition in a format suitable for use by programs.

            The possible values will be documented in the object that contains the condition.
        message:
          type: string
          description: |-
            Contains a text giving more details of the condition.

            This will usually be progress reports, or error messages, and are intended for use by humans, to debug problems.
      description: Contains the details of a condition that describes the status of
        a virtual machine.
    fulfillmentv1VirtualMachineConditionType:
      type: string
      description: |-
        Types of conditions used to describe the status of virtual machine.

         - VIRTUAL_MACHINE_CONDITION_TYPE_UNSPECIFIED: Unspecified indicates that the condition is unknown.

        This will never be appear in the `spec.conditions` field of a virtual machine.
         - VIRTUAL_MACHINE_CONDITION_TYPE_PROGRESSING: Indicates that the virtual machine isn't completely ready yet.

        Currently there are no `reason` values defined.
         - VIRTUAL_MACHINE_CONDITION_TYPE_READY: Indicates that the virtual machine is ready to use.

        Currently there are no `reason` values defined.
         - VIRTUAL_MACHINE_CONDITION_TYPE_FAILED: Indicates that the virtual machine is unusable.

        Currently there are no `reason` values defined.
         - VIRTUAL_MACHINE_CONDITION_TYPE_DEGRADED: Indicates that the virtual machine is degraded.
      default: VIRTUAL_MACHINE_CONDITION_TYPE_UNSPECIFIED
      enum:
      - VIRTUAL_MACHINE_CONDITION_TYPE_UNSPECIFIED
      - VIRTUAL_MACHINE_CONDITION_TYPE_PROGRESSING
      - VIRTUAL_MACHINE_CONDITION_TYPE_READY
      - VIRTUAL_MACHINE_CONDITION_TYPE_FAILED
      - VIRTUAL_MACHINE_CONDITION_TYPE_DEGRADED
    fulfillmentv1VirtualMachineSpec:
      type: object
      properties:
        template:
          type: string
          description: |-
            Reference to the virtual machine template.

            This is mandatory, and must be the value of the `id` field of one of the virtual machine templates.

            This can't be modified after the virtual machine is created.
        template_parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/protobufAny"
          description: |-
            Values of the template parameters.

            When using the HTTP+JSON version of the API the values must be represented as documented in the (ProtoJSON format
            document)[https://protobuf.dev/programming-guides/json]. For example, if the template has a `cpu_count`
            parameter of integer type, the complete virtual machine should be represented like this:

            ```json
            {
              "spec": {
                "template": "123",
                "template_parameters": {
                  "cpu_count": {
                    "@type": "type.googleapis.com/google.protobuf.Int32Value",
                    "value": 4
                  }
                }
              }
            }
            ```

            The possible values of the `@type` are the same as those used by the `type_url` field of the `Any` type:

            | Type                           | Value                                             |
            |--------------------------------|---------------------------------------------------|
            | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
            | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
            | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
            | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
            | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
            | String                         | `type.googleapis.com/google.protobuf.StringValue` |
            | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
            | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
            | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
            | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |

            These parameters can't be modified after the virtual machine is created.
      description: The spec contains the details of a virtual machine as desired by
        the user.
    fulfillmentv1VirtualMachineState:
      type: string
      description: |-
        Represents the overall state of a virtual machine.

         - VIRTUAL_MACHINE_STATE_UNSPECIFIED: Unspecified indicates that the state is unknown.
         - VIRTUAL_MACHINE_STATE_PROGRESSING: Indicates that the virtual machine isn't ready yet.
         - VIRTUAL_MACHINE_STATE_READY: Indicates that the virtual machine is ready.
         - VIRTUAL_MACHINE_STATE_FAILED: Indicates that the virtual machine is unusable.
      default: VIRTUAL_MACHINE_STATE_UNSPECIFIED
      enum:
      - VIRTUAL_MACHINE_STATE_UNSPECIFIED
      - VIRTUAL_MACHINE_STATE_PROGRESSING
      - VIRTUAL_MACHINE_STATE_READY
      - VIRTUAL_MACHINE_STATE_FAILED
    fulfillmentv1VirtualMachineStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineState"
        conditions:
          type: array
          description: |-
            Contains a list of conditions that describe in detail the status of the virtual machine.

            For example, a virtual machine that is ready could be represented like this (when converted to JSON):

               {
                 "id": "123",
                 "spec": {
                 },
                 "status": {
                   "state": "VIRTUAL_MACHINE_STATE_READY",
                   "conditions": [
                     {
                       "type": "VIRTUAL_MACHINE_CONDITION_TYPE_READY",
                       "status": "CONDITION_STATUS_TRUE",
                       "last_transition_time": "2025-03-12 20:15:59+00:00",
                       "message": "The virtual machine is ready to use",
                     },
                     {
                       "type": "VIRTUAL_MACHINE_CONDITION_TYPE_FAILED",
                       "status": "CONDITION_STATUS_FALSE",
                       "last_transition_time": "2025-03-12 20:10:59+00:00"
                     }
                   ]
                 }
               }

            In this example the `READY` condition is true. That tells us that the virtual machine is ready to use via the IP address
            provided in the `status.ip_address` field.

            The `FAILED` condition is false. That tells us that the virtual machine is *not* failed.

            Note that in this example, to make it shorter, only one condition appears. In general all the conditions (except
            `UNSPECIFIED`) will appear exactly once.

            Check the documentation of the values of the `VirtualMachineConditionType` enumerated type to see possible conditions and
            reasons.
          items:
            $ref: "#/components/schemas/fulfillmentv1VirtualMachineCondition"
        ip_address:
          type: string
          description: |-
            IP address of the virtual machine.

            This will be empty if the virtual machine isn't ready.
      description: The status contains the details of the virtual machine provided
        by the system.
    fulfillmentv1VirtualMachineTemplate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the template.
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
            UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the template, using Markdown\
            \ format."
        parameters:
          type: array
          description: |-
            Definitions of the parameters that can be used to customize the template.

            Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
            `spec.template_parameters` field of the virtual machine.
          items:
            $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplateParameterDefinition"
      description: |-
        A virtual machine template defines a type of virtual machine that can be created by the user. Note that the user doesn't create these
        templates: the system provides a collection of them, and the user chooses one.
    fulfillmentv1VirtualMachineTemplateParameterDefinition:
      type: object
      properties:
        name:
          type: string
          description: |-
            Name of the parameter.

            This is the name that should be used in the `template_parameters` field of the virtual machine to assign a value to the
            parameter.
        title:
          type: string
          description: |-
            Human friendly short description of the parameter, only a few words, suitable for displaying in one single line on
            a UI or CLI.
        description:
          type: string
          description: "Human friendly description of the parameter, using Markdown\
            \ format."
        required:
          type: boolean
          description: |-
            Indicates if this parameter is required or optional.

            Values for required parameters must be included when creating the virtual machine, otherwise it will be rejected.

            Note that there may be other dependencies between parameters which may cause a virtual machine to be rejected. For example,
            the allowed values of a parameter may depend on the value of another parameter. That kind of information will be in
            the `description` field.
        type:
          type: string
          description: |-
            Type of the parameter.

            The possible values are the same as those used by the `type_url` field of the `Any` type:

            | Type                           | Value                                             |
            |--------------------------------|---------------------------------------------------|
            | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
            | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
            | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
            | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
            | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
            | String                         | `type.googleapis.com/google.protobuf.StringValue` |
            | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
            | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
            | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
            | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |

            When using the HTTP+JSON version of the API the value provided in the `template_parameters` field of the virtual machine
            must be represented as documented in the (ProtoJSON format document)[https://protobuf.dev/programming-guides/json].
        default:
          $ref: "#/components/schemas/protobufAny"
      description: Contains type and documentation of a template parameter.
    fulfillmentv1VirtualMachineTemplatesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
    fulfillmentv1VirtualMachineTemplatesDeleteResponse:
      type: object
    fulfillmentv1VirtualMachineTemplatesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
    fulfillmentv1VirtualMachineTemplatesListResponse:
      type: object
      properties:
        size:
          type: integer
          description: |-
            Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
            of the request if there are not enough items, or of the system decides that returning that number of items isn't
            feasible or convenient for performance reasons.
          format: int32
        total:
          type: integer
          description: |-
            Total number of items of the collection that match the search criteria, regardless of the number of results
            requested with the `limit` parameter.
          format: int32
        items:
          type: array
          description: List of results.
          items:
            $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
    fulfillmentv1VirtualMachineTemplatesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplate"
    fulfillmentv1VirtualMachinesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
    fulfillmentv1VirtualMachinesDeleteResponse:
      type: object
    fulfillmentv1VirtualMachinesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
    fulfillmentv1VirtualMachinesListResponse:
      type: object
      properties:
        size:
          type: integer
          description: |-
            Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
            of the request if there are not enough items, or of the system decides that returning that number of items isn't
            feasible or convenient for performance reasons.
          format: int32
        total:
          type: integer
          description: |-
            Total number of items of the collection that match the search criteria, regardless of the number of results
            requested with the `limit` parameter.
          format: int32
        items:
          type: array
          description: List of results.
          items:
            $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
    fulfillmentv1VirtualMachinesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachine"
    googlerpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
    privatev1Cluster:
      type: object
      properties:
        id:
          type: string
          description: Public data.
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        spec:
          $ref: "#/components/schemas/privatev1ClusterSpec"
        status:
          $ref: "#/components/schemas/privatev1ClusterStatus"
      description: Contains the details about the cluster that are available only
        for the system.
    privatev1ClusterCondition:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/privatev1ClusterConditionType"
        status:
          $ref: "#/components/schemas/v1ConditionStatus"
        last_transition_time:
          type: string
          format: date-time
        reason:
          type: string
        message:
          type: string
    privatev1ClusterConditionType:
      type: string
      default: CLUSTER_CONDITION_TYPE_UNSPECIFIED
      enum:
      - CLUSTER_CONDITION_TYPE_UNSPECIFIED
      - CLUSTER_CONDITION_TYPE_PROGRESSING
      - CLUSTER_CONDITION_TYPE_READY
      - CLUSTER_CONDITION_TYPE_FAILED
      - CLUSTER_CONDITION_TYPE_DEGRADED
    privatev1ClusterNodeSet:
      type: object
      properties:
        host_class:
          type: string
        size:
          type: integer
          format: int32
    privatev1ClusterSpec:
      type: object
      properties:
        template:
          type: string
          description: Copies of the public fields.
        template_parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/protobufAny"
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/privatev1ClusterNodeSet"
    privatev1ClusterState:
      type: string
      default: CLUSTER_STATE_UNSPECIFIED
      enum:
      - CLUSTER_STATE_UNSPECIFIED
      - CLUSTER_STATE_PROGRESSING
      - CLUSTER_STATE_READY
      - CLUSTER_STATE_FAILED
    privatev1ClusterStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/privatev1ClusterState"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/privatev1ClusterCondition"
        api_url:
          type: string
        console_url:
          type: string
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/privatev1ClusterNodeSet"
        hub:
          type: string
          description: Identifier of the hub that was selected for this cluster.
    privatev1ClusterTemplate:
      type: object
      properties:
        id:
          type: string
          description: Public data.
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        title:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/privatev1ClusterTemplateParameterDefinition"
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/privatev1ClusterTemplateNodeSet"
    privatev1ClusterTemplateNodeSet:
      type: object
      properties:
        host_class:
          type: string
        size:
          type: integer
          format: int32
    privatev1ClusterTemplateParameterDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        required:
          type: boolean
        type:
          type: string
        default:
          $ref: "#/components/schemas/protobufAny"
    privatev1ClusterTemplatesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1ClusterTemplate"
    privatev1ClusterTemplatesDeleteResponse:
      type: object
    privatev1ClusterTemplatesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1ClusterTemplate"
    privatev1ClusterTemplatesListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/privatev1ClusterTemplate"
    privatev1ClusterTemplatesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1ClusterTemplate"
    privatev1ClustersCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1Cluster"
    privatev1ClustersDeleteResponse:
      type: object
    privatev1ClustersGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1Cluster"
    privatev1ClustersListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/privatev1Cluster"
    privatev1ClustersUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1Cluster"
    privatev1Event:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the event.
        type:
          $ref: "#/components/schemas/privatev1EventType"
        cluster:
          $ref: "#/components/schemas/privatev1Cluster"
        cluster_template:
          $ref: "#/components/schemas/privatev1ClusterTemplate"
        host_class:
          $ref: "#/components/schemas/privatev1HostClass"
        hub:
          $ref: "#/components/schemas/v1Hub"
        virtual_machine_template:
          $ref: "#/components/schemas/privatev1VirtualMachineTemplate"
        virtual_machine:
          $ref: "#/components/schemas/privatev1VirtualMachine"
      description: Represents events delivered by the server.
    privatev1EventType:
      type: string
      description: |2-
         - EVENT_TYPE_UNSPECIFIED: Unspecified means that the even type is unknown.
         - EVENT_TYPE_OBJECT_CREATED: Means that a new object has been created.

        The payload will contain the representation of the object.
         - EVENT_TYPE_OBJECT_UPDATED: Means that an existing object has been modified.

        The payload will contain the updated representation of the object.
         - EVENT_TYPE_OBJECT_DELETED: Means that an object has been deleted.

        The payload will contain the representation of the object right before it was deleted.
      default: EVENT_TYPE_UNSPECIFIED
      enum:
      - EVENT_TYPE_UNSPECIFIED
      - EVENT_TYPE_OBJECT_CREATED
      - EVENT_TYPE_OBJECT_UPDATED
      - EVENT_TYPE_OBJECT_DELETED
    privatev1EventsWatchResponse:
      type: object
      properties:
        event:
          $ref: "#/components/schemas/privatev1Event"
    privatev1HostClass:
      type: object
      properties:
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        title:
          type: string
        description:
          type: string
    privatev1HostClassesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1HostClass"
    privatev1HostClassesDeleteResponse:
      type: object
    privatev1HostClassesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1HostClass"
    privatev1HostClassesListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/privatev1HostClass"
    privatev1HostClassesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1HostClass"
    privatev1Metadata:
      type: object
      properties:
        creation_timestamp:
          type: string
          description: Time of creation of the object.
          format: date-time
        deletion_timestamp:
          type: string
          description: Time of deletion of the object.
          format: date-time
        finalizers:
          type: array
          description: |-
            Finalizers indicate tasks that need to be completed before the object can be completely deleted. When the object
            has been deleted and this list is empty the system will automatically archive the object.
          items:
            type: string
        creators:
          type: array
          description: Creators contains the identifiers of the users and groups that
            created the object.
          items:
            type: string
      description: Metadata common to all kinds of objects.
    privatev1VirtualMachine:
      type: object
      properties:
        id:
          type: string
          description: Public data.
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        spec:
          $ref: "#/components/schemas/privatev1VirtualMachineSpec"
        status:
          $ref: "#/components/schemas/privatev1VirtualMachineStatus"
      description: Contains the details about the virtual machine that are available
        only for the system.
    privatev1VirtualMachineCondition:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/privatev1VirtualMachineConditionType"
        status:
          $ref: "#/components/schemas/v1ConditionStatus"
        last_transition_time:
          type: string
          format: date-time
        reason:
          type: string
        message:
          type: string
    privatev1VirtualMachineConditionType:
      type: string
      default: VIRTUAL_MACHINE_CONDITION_TYPE_UNSPECIFIED
      enum:
      - VIRTUAL_MACHINE_CONDITION_TYPE_UNSPECIFIED
      - VIRTUAL_MACHINE_CONDITION_TYPE_PROGRESSING
      - VIRTUAL_MACHINE_CONDITION_TYPE_READY
      - VIRTUAL_MACHINE_CONDITION_TYPE_FAILED
      - VIRTUAL_MACHINE_CONDITION_TYPE_DEGRADED
    privatev1VirtualMachineSpec:
      type: object
      properties:
        template:
          type: string
          description: Copies of the public fields.
        template_parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/protobufAny"
    privatev1VirtualMachineState:
      type: string
      default: VIRTUAL_MACHINE_STATE_UNSPECIFIED
      enum:
      - VIRTUAL_MACHINE_STATE_UNSPECIFIED
      - VIRTUAL_MACHINE_STATE_PROGRESSING
      - VIRTUAL_MACHINE_STATE_READY
      - VIRTUAL_MACHINE_STATE_FAILED
    privatev1VirtualMachineStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/privatev1VirtualMachineState"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/privatev1VirtualMachineCondition"
        ip_address:
          type: string
        hub:
          type: string
          description: Identifier of the hub that was selected for this virtual machine.
    privatev1VirtualMachineTemplate:
      type: object
      properties:
        id:
          type: string
          description: Public data.
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        title:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/privatev1VirtualMachineTemplateParameterDefinition"
    privatev1VirtualMachineTemplateParameterDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        required:
          type: boolean
        type:
          type: string
        default:
          $ref: "#/components/schemas/protobufAny"
    privatev1VirtualMachineTemplatesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachineTemplate"
    privatev1VirtualMachineTemplatesDeleteResponse:
      type: object
    privatev1VirtualMachineTemplatesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachineTemplate"
    privatev1VirtualMachineTemplatesListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/privatev1VirtualMachineTemplate"
    privatev1VirtualMachineTemplatesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachineTemplate"
    privatev1VirtualMachinesCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachine"
    privatev1VirtualMachinesDeleteResponse:
      type: object
    privatev1VirtualMachinesGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachine"
    privatev1VirtualMachinesListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/privatev1VirtualMachine"
    privatev1VirtualMachinesUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/privatev1VirtualMachine"
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    sharedv1Metadata:
      type: object
      properties:
        creation_timestamp:
          type: string
          description: Time of creation of the object.
          format: date-time
        deletion_timestamp:
          type: string
          description: Time of deletion of the object.
          format: date-time
        creators:
          type: array
          description: Names of the creators of the object.
          items:
            type: string
      description: Metadata common to all kinds of objects.
    v1ClustersGetKubeconfigResponse:
      type: object
      properties:
        kubeconfig:
          type: string
    v1ClustersGetPasswordResponse:
      type: object
      properties:
        password:
          type: string
    v1ConditionStatus:
      type: string
      description: |2-
         - CONDITION_STATUS_UNSPECIFIED: Indicates that the system can't decide if the object is in the condition or not.
         - CONDITION_STATUS_TRUE: Indicates that the object is in the condition.
         - CONDITION_STATUS_FALSE: Indicates that the object is not in the condition.
      default: CONDITION_STATUS_UNSPECIFIED
      enum:
      - CONDITION_STATUS_UNSPECIFIED
      - CONDITION_STATUS_TRUE
      - CONDITION_STATUS_FALSE
    v1Hub:
      type: object
      properties:
        id:
          type: string
          description: |-
            Unique identifier of the hub.

            This will be automatically generated by the server when the hub is created.
        metadata:
          $ref: "#/components/schemas/privatev1Metadata"
        kubeconfig:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: The Kubeconfig containing the address and credentials that
            the fulfillment service will use to connect to the hub.
          format: byte
        namespace:
          type: string
          description: Namespace where the cluster orders will be created.
      description: Contains the details of a hub.
    v1HubsCreateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/v1Hub"
    v1HubsDeleteResponse:
      type: object
    v1HubsGetResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/v1Hub"
    v1HubsListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/v1Hub"
    v1HubsUpdateResponse:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/v1Hub"
    Stream result of eventsv1EventsWatchResponse:
      title: Stream result of eventsv1EventsWatchResponse
      type: object
      properties:
        result:
          $ref: "#/components/schemas/eventsv1EventsWatchResponse"
        error:
          $ref: "#/components/schemas/googlerpcStatus"
    cluster_templates_object_id_body:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
            UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the template, using Markdown\
            \ format."
        parameters:
          type: array
          description: |-
            Definitions of the parameters that can be used to customize the template.

            Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
            `spec.template_parameters` field of the cluster.
          items:
            $ref: "#/components/schemas/fulfillmentv1ClusterTemplateParameterDefinition"
        node_sets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/fulfillmentv1ClusterTemplateNodeSet"
          description: Initial node sets of the cluster.
      description: |-
        A cluster template defines a type of cluster that can be created by the user. Note that the user doesn't create these
        templates: the system provides a collection of them, and the user chooses one.
    clusters_object_id_body:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        spec:
          $ref: "#/components/schemas/fulfillmentv1ClusterSpec"
        status:
          $ref: "#/components/schemas/fulfillmentv1ClusterStatus"
      description: |-
        Contains the details of the cluster.

        The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
        the cluster, is provided by the system and can't be modified by the user.
    host_classes_object_id_body:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the host class, only a few words, suitable for displaying in one single
            line on a UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the host class, using Markdown\
            \ format."
      description: |-
        Describes a set of hosts that share characteristics.

        For example there could be a host class `acme_1tb` to describe the set of hosts manifactured by ACME and with 1 TiB
        of RAM, and another `ibm_mi300x` to describe the set of hosts manufactured IBM and with a MI300X GPU.

        This is similar to the _instance type_ concept used by many cloud providers.

        The detailed chracteristics of the host (CPU, memory, GPU, etc) will be in the `description` field.
    virtual_machine_templates_object_id_body:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        title:
          type: string
          description: |-
            Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
            UI or CLI.
        description:
          type: string
          description: "Human friendly long description of the template, using Markdown\
            \ format."
        parameters:
          type: array
          description: |-
            Definitions of the parameters that can be used to customize the template.

            Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
            `spec.template_parameters` field of the virtual machine.
          items:
            $ref: "#/components/schemas/fulfillmentv1VirtualMachineTemplateParameterDefinition"
      description: |-
        A virtual machine template defines a type of virtual machine that can be created by the user. Note that the user doesn't create these
        templates: the system provides a collection of them, and the user chooses one.
    virtual_machines_object_id_body:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/sharedv1Metadata"
        spec:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineSpec"
        status:
          $ref: "#/components/schemas/fulfillmentv1VirtualMachineStatus"
      description: |-
        Contains the details of the virtual machine.

        The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
        the virtual machine, is provided by the system and can't be modified by the user.
x-original-swagger-version: "2.0"
