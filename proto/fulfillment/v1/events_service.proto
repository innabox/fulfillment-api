//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package fulfillment.v1;

import "fulfillment/v1/event_type.proto";
import "google/api/annotations.proto";

message EventsWatchRequest {
  // When this parameter is used the server will only send the events that are newer than the event with this
  // identifier. Note that the event with this identifier will *not* be sent.
  //
  // When this parameter isn't used the server will send only the events that are generated after the request is
  // received.
  optional string from = 1;

  // Filter criteria.
  //
  // The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
  // of the attributes of the event instead of the names of the columns of a table. For example, in order to get only
  // the events of type `CREATED` the value should be:
  //
  //     type = 'CREATED'
  //
  // If this isn't provided, or if the value is empty, then all the events that the user has permission to see will be
  // returned.
  optional string filter = 2;
}

message EventsWatchResponse {
  Event event = 1;
}

service Events {
  // Watches events.
  rpc Watch(EventsWatchRequest) returns (stream EventsWatchResponse) {
    option (google.api.http) = {get: "/api/fulfillment/v1/events"};
  }
}
