//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package fulfillment.v1;

import "fulfillment/v1/virtual_machine_type.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

message VirtualMachinesListRequest {
  // Index of the first result. If not specified the default value will be zero.
  optional int32 offset = 1;

  // Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
  // that there may not be enough results to return, and that the server may decide, for performance reasons, to return
  // less results than requested.
  optional int32 limit = 2;

  // Filter criteria.
  //
  // The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
  // of the attributes of the virtual machine instead of the names of the columns of a table. For example, in order to retrieve
  // all the virtual machines with an IP address starting with `192.168` the value should be:
  //
  //     ip_address like '192.168%'
  //
  // If this isn't provided, or if the value is empty, then all the virtual machines that the user has permission to see will be
  // returned.
  optional string filter = 3;

  // Order criteria.
  //
  // The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
  // names of the attributes of the virtual machine instead of the names of the columns of a table. For example, in order to
  // sort the virtual machines descending by IP address the value should be:
  //
  //     ip_address desc
  //
  // If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
  optional string order = 4;
}

message VirtualMachinesListResponse {
  // Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
  // of the request if there are not enough items, or of the system decides that returning that number of items isn't
  // feasible or convenient for performance reasons.
  optional int32 size = 1;

  // Total number of items of the collection that match the search criteria, regardless of the number of results
  // requested with the `limit` parameter.
  optional int32 total = 2;

  // List of results.
  repeated VirtualMachine items = 3;
}

message VirtualMachinesGetRequest {
  string id = 1;
}

message VirtualMachinesGetResponse {
  VirtualMachine object = 1;
}

message VirtualMachinesCreateRequest {
  VirtualMachine object = 1;
}

message VirtualMachinesCreateResponse {
  VirtualMachine object = 1;
}

message VirtualMachinesUpdateRequest {
  VirtualMachine object = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message VirtualMachinesUpdateResponse {
  VirtualMachine object = 1;
}

message VirtualMachinesDeleteRequest {
  string id = 1;
}

message VirtualMachinesDeleteResponse {}

service VirtualMachines {
  // Retrieves the list of virtual machines.
  rpc List(VirtualMachinesListRequest) returns (VirtualMachinesListResponse) {
    option (google.api.http) = {get: "/api/fulfillment/v1/virtual_machines"};
  }

  // Retrieves the details of one specific virtual machine.
  rpc Get(VirtualMachinesGetRequest) returns (VirtualMachinesGetResponse) {
    option (google.api.http) = {
      get: "/api/fulfillment/v1/virtual_machines/{id}"
      response_body: "object"
    };
  }

  // Creates a new virtual machine.
  //
  // Note that this operation is not allowed for regular users, only for the server. Regular users create virtual machines
  // indirectly, creating a virtual machine order that will eventually result in the system creating a virtual machine.
  rpc Create(VirtualMachinesCreateRequest) returns (VirtualMachinesCreateResponse) {
    option (google.api.http) = {
      post: "/api/fulfillment/v1/virtual_machines"
      body: "object"
      response_body: "object"
    };
  }

  // Updates an existing virtual machine.
  //
  // In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
  // populated from the list of fields present in the request body. For example, to update the `state` of a virtual machine to
  // `READY` the request line should be like this:
  //
  // ```http
  // PATCH /api/fulfillment/v1/virtual_machines/123
  // ```
  //
  // And the request body should be like this:
  //
  // ```json
  // {
  //   "status": {
  //     "state": "VIRTUAL_MACHINE_STATE_READY"
  //   }
  // }
  // ```
  //
  // The response body will contain the modified object.
  rpc Update(VirtualMachinesUpdateRequest) returns (VirtualMachinesUpdateResponse) {
    option (google.api.http) = {
      patch: "/api/fulfillment/v1/virtual_machines/{object.id}"
      body: "object"
      response_body: "object"
    };
  }

  // Delete a virtual machine.
  rpc Delete(VirtualMachinesDeleteRequest) returns (VirtualMachinesDeleteResponse) {
    option (google.api.http) = {delete: "/api/fulfillment/v1/virtual_machines/{id}"};
  }
}
