//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package fulfillment.v1;

import "shared/v1/metadata_type.proto";

// Contains the details of the pool.
//
// The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
// the pool, is provided by the system and can't be modified by the user.
message HostPool {
  // Unique identifier of the pool.
  string id = 1;

  shared.v1.Metadata metadata = 2;
  HostPoolSpec spec = 3;
  HostPoolStatus status = 4;
}

// The spec contains the details of a pool as desired by the user.
message HostPoolSpec {
  // Desired host sets of the pool.
  //
  // For example, a pool created with two different hosts sets, one for hosts without GPUs and another for hosts with
  // GPUs could be be represented like this:
  //
  // ```json
  // {
  //   "spec": {
  //     "host_sets": [
  //       {
  //         "host_class": "acme_1tb",
  //         "size": 3
  //       },
  //       {
  //         "host_class": "acme_1tb_h100",
  //         "size": 3
  //       }
  //     ]
  //   }
  // }
  // ```
  repeated HostSetSpec host_sets = 1;
}

// The status contains the details of the pool provided by the system.
message HostPoolStatus {
  // Indicates the overall state of the pool.
  HostPoolState state = 1;

  // Actual host sets of the pool.
  //
  // This is the actual status of the hosts sets. It will be different to `spec.host_sets` when there is a change that
  // is in progress, or if the system can't apply the changes requested by the user.
  repeated HostSetStatus host_sets = 2;
}

// Represents the overall state of a pool.
enum HostPoolState {
  // Unspecified indicates that the state is unknown.
  HOST_POOL_STATE_UNSPECIFIED = 0;

  // Indicates that the pool isn't ready yet.
  HOST_POOL_STATE_PROGRESSING = 1;

  // Indicates indicates that the pool is ready.
  HOST_POOL_STATE_READY = 2;

  // Indicates indicates that the pool is unusable.
  HOST_POOL_STATE_FAILED = 3;
}

// Desired set of hosts of the pool.
message HostSetSpec {
  // Identifier of the class of hosts.
  //
  // The details of the host class can be obtained using the `List` and `Get` method of the `HostClasses` service. For
  // example, to get the details of the `acme_1tb` host class using the HTTP+JSON version of the API:
  //
  // ```http
  // GET /api/fulfillment/v1/host_classes/acme_1tb
  // ```
  //
  // Which will return something like this:
  //
  // ```json
  // {
  //   "id": "acme_1tb",
  //   "title": "ACME server with 1 TiB of RAM and no GPU",
  //   "description": "ACME server model XYZ with 1 TiB of RAM, 2 Xeon 6 CPUS and no GPU."
  // }
  // ```
  string host_class = 1;

  // Desired number of hosts of the set.
  int32 size = 2;
}

// Actual set of hosts of the pool.
message HostSetStatus {
  // Identifier of the class of hosts.
  string host_class = 1;

  // Actual number of hosts of the set.
  int32 size = 2;
}
