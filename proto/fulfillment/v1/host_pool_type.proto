//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package fulfillment.v1;

import "google/protobuf/timestamp.proto";
import "shared/v1/condition_status_type.proto";
import "shared/v1/metadata_type.proto";

// Contains the details of the host pool.
//
// The `spec` contains the desired details, and may be modified by the user. The `status` contains the current status of
// the host pool, is provided by the system and can't be modified by the user.
message HostPool {
  // Unique identifier of the host pool.
  string id = 1;

  shared.v1.Metadata metadata = 2;
  HostPoolSpec spec = 3;
  HostPoolStatus status = 4;
}

// The spec contains the details of a host pool as desired by the user.
message HostPoolSpec {
  // Desired host sets of the host pool.
  //
  // The key of the map is the unique identifier of the host set for this host pool.
  map<string, HostPoolHostSet> host_sets = 1;
}

// The status contains the details of the host pool provided by the system.
message HostPoolStatus {
  // Indicates the overall state of the host pool.
  HostPoolState state = 1;

  // The ids of assigned Hosts;
  repeated string hosts = 2;

  // Contains a list of conditions that describe in detail the status of the host pool.
  //
  // For example, a host pool that is ready could be represented like this (when converted to JSON):
  //
  //    {
  //      "id": "123",
  //      "spec": {
  //      },
  //      "status": {
  //        "state": "HOST_POOL_STATE_READY",
  //        "conditions": [
  //          {
  //            "type": "HOST_POOL_CONDITION_TYPE_READY",
  //            "status": "CONDITION_STATUS_TRUE",
  //            "last_transition_time": "2025-03-12 20:15:59+00:00",
  //            "message": "The host pool is ready to use",
  //          },
  //          {
  //            "type": "HOST_POOL_CONDITION_TYPE_FAILED",
  //            "status": "CONDITION_STATUS_FALSE",
  //            "last_transition_time": "2025-03-12 20:10:59+00:00"
  //          }
  //        ]
  //      }
  //    }
  //
  // In this example the `READY` condition is true. That tells us that the host pool is ready to use via the API URL
  // provided in the `status.api_url` field.
  //
  // The `FAILED` condition is false. That tells us that the host pool is *not* failed.
  //
  // Note that in this example, to make it shorter, only one condition appears. In general all the conditions (except
  // `UNSPECIFIED`) will appear exactly once.
  //
  // Check the documentation of the values of the `HostPoolConditionType` enumerated type to see possible conditions and
  // reasons.
  repeated HostPoolCondition conditions = 3;

  // Current host sets of the host pool.
  //
  // This is the current status of the host sets. It will be different to `spec.host_sets` when there is a change that
  // is in progress, or if the system can't apply the changes requested by the user.
  //
  // The key of the map is the unique identifier of the host set for this host pool.
  map<string, HostPoolHostSet> host_sets = 4;
}

// Represents the overall state of a host pool.
enum HostPoolState {
  // Unspecified indicates that the state is unknown.
  HOST_POOL_STATE_UNSPECIFIED = 0;

  // Indicates that the host pool isn't ready yet.
  HOST_POOL_STATE_PROGRESSING = 1;

  // Indicates indicates that the host pool is ready.
  HOST_POOL_STATE_READY = 2;

  // Indicates indicates that the host pool is unusable.
  HOST_POOL_STATE_FAILED = 3;
}

// Contains the details of a condition that describes the status of a host pool.
message HostPoolCondition {
  // Indicates the type of condition.
  HostPoolConditionType type = 1;

  // Indicates the status of the condition.
  shared.v1.ConditionStatus status = 2;

  // This time is the last time that the condition was updated.
  google.protobuf.Timestamp last_transition_time = 3;

  // Contains a the reason of the condition in a format suitable for use by programs.
  //
  // The possible values will be documented in the object that contains the condition.
  optional string reason = 4;

  // Contains a text giving more details of the condition.
  //
  // This will usually be progress reports, or error messages, and are intended for use by humans, to debug problems.
  optional string message = 5;
}

// Types of conditions used to describe the status of host pool.
enum HostPoolConditionType {
  // Unspecified indicates that the condition is unknown.
  //
  // This will never be appear in the `spec.conditions` field of a host pool.
  HOST_POOL_CONDITION_TYPE_UNSPECIFIED = 0;

  // Indicates that the host pool isn't completely ready yet.
  //
  // Currently there are no `reason` values defined.
  HOST_POOL_CONDITION_TYPE_PROGRESSING = 1;

  // Indicates that the host pool is ready to use.
  //
  // Currently there are no `reason` values defined.
  HOST_POOL_CONDITION_TYPE_READY = 2;

  // Indicates that the host pool is unusable.
  //
  // Currently there are no `reason` values defined.
  HOST_POOL_CONDITION_TYPE_FAILED = 3;

  // Indicates that the host pool is degraded.
  HOST_POOL_CONDITION_TYPE_DEGRADED = 4;
}

// Defines a set of hosts that are part of the host pool, all of them of the same class of host.
message HostPoolHostSet {
  // Identifier of the class of hosts that are part of the set.
  //
  // The details of the host class can be obtained using the `List` and `Get` method of the `HostClasses` service. For
  // example, to get the details of the `acme_1tb` host class using the HTTP+JSON version of the API:
  //
  // ```http
  // GET /api/fulfillment/v1/host_classes/acme_1tb
  // ```
  //
  // Which will return something like this:
  //
  // ```json
  // {
  //   "id": "acme_1tb",
  //   "title": "ACME server with 1 TiB of RAM and no GPU",
  //   "description": "ACME server model XYZ with 1 TiB of RAM, 2 Xeon 6 CPUS and no GPU."
  // }
  // ```
  //
  // This will be set by the system when the host pool is initially created, according to the template selected by the
  // user.
  //
  // The user will not have permission to change this field.
  string host_class = 1;

  // Number of hosts of the set.
  int32 size = 2;
}
